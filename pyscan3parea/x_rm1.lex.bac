/*BEGIN decl DELIMITER*/
%x MAINSCANNERSTATE

%{
int mainscannerstate=1;

%}

/*END decl DELIMITER*/

%option nomain
%option noyywrap
%{
#include "x_io1.h"
#ifndef FLEX_BEGIN_NEXT_TOKEN
#define FLEX_BEGIN_NEXT_TOKEN
#else
static parser_master_t* mp=NULL;
//#define change_state (mp->change_state)
//#define change_pos (mp->change_pos)
//#define current_text_heap (mp->current_text_heap)
#endif
%}


%{
FLEX_DECLARATIONS
%}


/* %% has to be on the beginning of the line !!!*/

%%


    if(MAINSCANNERSTATE!=1){printf("new version of flax has changed states numbering for MAINSCANNERSTATE");exit(1);}



	 FLEX_BEGIN(MAINSCANNERSTATE)
<MAINSCANNERSTATE><<EOF>> 	 %{
FLEX_NEW_TERMINAL(TOK_EXIT);FLEX_INCREASE_POSITION;return TOK_EXIT;
 	 %}
<MAINSCANNERSTATE>([r]|[u]|[u][r]|[R]|[U]|[U][R]|[U][r]|[u][R]){0,1}['][']['](([^'\\]|[\\]([a]|[^a]))|([']([^'\\]|[\\]([a]|[^a])))|(['][']([^'\\]|[\\]([a]|[^a]))))*['][']['] 	 %{
FLEX_NEW_TERMINAL(TOK_LONGSTRINGLITERALSINGLEQUOTE);FLEX_INCREASE_POSITION;return TOK_LONGSTRINGLITERALSINGLEQUOTE;
 	 %}
<MAINSCANNERSTATE>([r]|[u]|[u][r]|[R]|[U]|[U][R]|[U][r]|[u][R]){0,1}[\x22][\x22][\x22](([^\\\x22]|[\\]([a]|[^a]))|([\x22]([^\\\x22]|[\\]([a]|[^a])))|([\x22][\x22]([^\\\x22]|[\\]([a]|[^a]))))*[\x22][\x22][\x22] 	 %{
FLEX_NEW_TERMINAL(TOK_LONGSTRINGLITERALDOUBLEQUOTE);FLEX_INCREASE_POSITION;return TOK_LONGSTRINGLITERALDOUBLEQUOTE;
 	 %}
<MAINSCANNERSTATE>([r]|[u]|[u][r]|[R]|[U]|[U][R]|[U][r]|[u][R]){0,1}[']([^\\\n']|[\\]([a]|[^a]))*['] 	 %{
FLEX_NEW_TERMINAL(TOK_SHORTSTRINGLITERALSINGLEQUOTE);FLEX_INCREASE_POSITION;return TOK_SHORTSTRINGLITERALSINGLEQUOTE;
 	 %}
<MAINSCANNERSTATE>([r]|[u]|[u][r]|[R]|[U]|[U][R]|[U][r]|[u][R]){0,1}[\x22]([^\\\n\x22]|[\\]([a]|[^a]))*[\x22] 	 %{
FLEX_NEW_TERMINAL(TOK_SHORTSTRINGLITERALDOUBLEQUOTE);FLEX_INCREASE_POSITION;return TOK_SHORTSTRINGLITERALDOUBLEQUOTE;
 	 %}
<MAINSCANNERSTATE>([0-9]*[.][0-9]+|[0-9]+[.])|([0-9]+|([0-9]*[.][0-9]+|[0-9]+[.]))([eE]([-+]{0,1})[0-9]+) 	 %{
FLEX_NEW_TERMINAL(TOK_FLOATNUMBER);FLEX_INCREASE_POSITION;return TOK_FLOATNUMBER;
 	 %}
<MAINSCANNERSTATE>(([1-9][0-9]*|[0])|([0][0-7]+)|([0][xX][0-9a-fA-F]+))[lL] 	 %{
FLEX_NEW_TERMINAL(TOK_LONGINTEGER);FLEX_INCREASE_POSITION;return TOK_LONGINTEGER;
 	 %}
<MAINSCANNERSTATE>(([1-9][0-9]*|[0])|([0][0-7]+)|([0][xX][0-9a-fA-F]+)) 	 %{
FLEX_NEW_TERMINAL(TOK_INTEGER);FLEX_INCREASE_POSITION;return TOK_INTEGER;
 	 %}
<MAINSCANNERSTATE>#[^\x0a\x0d]* 	 %{
FLEX_NEW_TERMINAL(TOK_COMMENT);FLEX_INCREASE_POSITION;return TOK_COMMENT;
 	 %}
<MAINSCANNERSTATE>(([0-9]*[.][0-9]+|[0-9]+[.])|([0-9]+|([0-9]*[.][0-9]+|[0-9]+[.]))([eE]([-+]{0,1})[0-9]+)|[0-9]+)[jJ] 	 %{
FLEX_NEW_TERMINAL(TOK_IMAGNUMBER);FLEX_INCREASE_POSITION;return TOK_IMAGNUMBER;
 	 %}
<MAINSCANNERSTATE>[(] 	 %{
FLEX_NEW_TERMINAL(TOK_OP);FLEX_INCREASE_POSITION;return TOK_OP;
 	 %}
<MAINSCANNERSTATE>([\x0d]|[\x0d][\x0a]|[\x0a]) 	 %{
FLEX_NEW_TERMINAL(TOK_NEWLINE);FLEX_INCREASE_POSITION;return TOK_NEWLINE;
 	 %}
<MAINSCANNERSTATE>([\\]([\x0d]|[\x0d][\x0a]|[\x0a])|[ \t\x0c])+ 	 %{
FLEX_NEW_TERMINAL(TOK_SPACE);FLEX_INCREASE_POSITION;return TOK_SPACE;
 	 %}
<MAINSCANNERSTATE>[)] 	 %{
FLEX_NEW_TERMINAL(TOK_CP);FLEX_INCREASE_POSITION;return TOK_CP;
 	 %}
<MAINSCANNERSTATE>[,] 	 %{
FLEX_NEW_TERMINAL(TOK_COMMA);FLEX_INCREASE_POSITION;return TOK_COMMA;
 	 %}
<MAINSCANNERSTATE>[\x5b] 	 %{
FLEX_NEW_TERMINAL(TOK_OB);FLEX_INCREASE_POSITION;return TOK_OB;
 	 %}
<MAINSCANNERSTATE>[\x5d] 	 %{
FLEX_NEW_TERMINAL(TOK_CB);FLEX_INCREASE_POSITION;return TOK_CB;
 	 %}
<MAINSCANNERSTATE>[f][o][r] 	 %{
FLEX_NEW_TERMINAL(TOK_FOR);FLEX_INCREASE_POSITION;return TOK_FOR;
 	 %}
<MAINSCANNERSTATE>[i][n] 	 %{
FLEX_NEW_TERMINAL(TOK_IN);FLEX_INCREASE_POSITION;return TOK_IN;
 	 %}
<MAINSCANNERSTATE>[i][f] 	 %{
FLEX_NEW_TERMINAL(TOK_IF);FLEX_INCREASE_POSITION;return TOK_IF;
 	 %}
<MAINSCANNERSTATE>[{] 	 %{
FLEX_NEW_TERMINAL(TOK_AO);FLEX_INCREASE_POSITION;return TOK_AO;
 	 %}
<MAINSCANNERSTATE>[}] 	 %{
FLEX_NEW_TERMINAL(TOK_AC);FLEX_INCREASE_POSITION;return TOK_AC;
 	 %}
<MAINSCANNERSTATE>[:] 	 %{
FLEX_NEW_TERMINAL(TOK_CO);FLEX_INCREASE_POSITION;return TOK_CO;
 	 %}
<MAINSCANNERSTATE>[`] 	 %{
FLEX_NEW_TERMINAL(TOK_BQ);FLEX_INCREASE_POSITION;return TOK_BQ;
 	 %}
<MAINSCANNERSTATE>[.] 	 %{
FLEX_NEW_TERMINAL(TOK_FS);FLEX_INCREASE_POSITION;return TOK_FS;
 	 %}
<MAINSCANNERSTATE>[.][.][.] 	 %{
FLEX_NEW_TERMINAL(TOK_FSFSFS);FLEX_INCREASE_POSITION;return TOK_FSFSFS;
 	 %}
<MAINSCANNERSTATE>[*] 	 %{
FLEX_NEW_TERMINAL(TOK_ST);FLEX_INCREASE_POSITION;return TOK_ST;
 	 %}
<MAINSCANNERSTATE>[*][*] 	 %{
FLEX_NEW_TERMINAL(TOK_STST);FLEX_INCREASE_POSITION;return TOK_STST;
 	 %}
<MAINSCANNERSTATE>[=] 	 %{
FLEX_NEW_TERMINAL(TOK_EQ);FLEX_INCREASE_POSITION;return TOK_EQ;
 	 %}
<MAINSCANNERSTATE>[-] 	 %{
FLEX_NEW_TERMINAL(TOK_MN);FLEX_INCREASE_POSITION;return TOK_MN;
 	 %}
<MAINSCANNERSTATE>[+] 	 %{
FLEX_NEW_TERMINAL(TOK_PL);FLEX_INCREASE_POSITION;return TOK_PL;
 	 %}
<MAINSCANNERSTATE>[~] 	 %{
FLEX_NEW_TERMINAL(TOK_TL);FLEX_INCREASE_POSITION;return TOK_TL;
 	 %}
<MAINSCANNERSTATE>[/][/] 	 %{
FLEX_NEW_TERMINAL(TOK_DIDI);FLEX_INCREASE_POSITION;return TOK_DIDI;
 	 %}
<MAINSCANNERSTATE>[/] 	 %{
FLEX_NEW_TERMINAL(TOK_DI);FLEX_INCREASE_POSITION;return TOK_DI;
 	 %}
<MAINSCANNERSTATE>[%] 	 %{
FLEX_NEW_TERMINAL(TOK_PC);FLEX_INCREASE_POSITION;return TOK_PC;
 	 %}
<MAINSCANNERSTATE>[<][<] 	 %{
FLEX_NEW_TERMINAL(TOK_LTLT);FLEX_INCREASE_POSITION;return TOK_LTLT;
 	 %}
<MAINSCANNERSTATE>[>][>] 	 %{
FLEX_NEW_TERMINAL(TOK_GTGT);FLEX_INCREASE_POSITION;return TOK_GTGT;
 	 %}
<MAINSCANNERSTATE>[&] 	 %{
FLEX_NEW_TERMINAL(TOK_AS);FLEX_INCREASE_POSITION;return TOK_AS;
 	 %}
<MAINSCANNERSTATE>[\x5e] 	 %{
FLEX_NEW_TERMINAL(TOK_EX);FLEX_INCREASE_POSITION;return TOK_EX;
 	 %}
<MAINSCANNERSTATE>[|] 	 %{
FLEX_NEW_TERMINAL(TOK_OR);FLEX_INCREASE_POSITION;return TOK_OR;
 	 %}
<MAINSCANNERSTATE>[<] 	 %{
FLEX_NEW_TERMINAL(TOK_LT);FLEX_INCREASE_POSITION;return TOK_LT;
 	 %}
<MAINSCANNERSTATE>[>] 	 %{
FLEX_NEW_TERMINAL(TOK_GT);FLEX_INCREASE_POSITION;return TOK_GT;
 	 %}
<MAINSCANNERSTATE>[=][=] 	 %{
FLEX_NEW_TERMINAL(TOK_EQEQ);FLEX_INCREASE_POSITION;return TOK_EQEQ;
 	 %}
<MAINSCANNERSTATE>[>][=] 	 %{
FLEX_NEW_TERMINAL(TOK_GTEQ);FLEX_INCREASE_POSITION;return TOK_GTEQ;
 	 %}
<MAINSCANNERSTATE>[<][=] 	 %{
FLEX_NEW_TERMINAL(TOK_LTEQ);FLEX_INCREASE_POSITION;return TOK_LTEQ;
 	 %}
<MAINSCANNERSTATE>[<][>] 	 %{
FLEX_NEW_TERMINAL(TOK_LTGT);FLEX_INCREASE_POSITION;return TOK_LTGT;
 	 %}
<MAINSCANNERSTATE>[!][=] 	 %{
FLEX_NEW_TERMINAL(TOK_ETEQ);FLEX_INCREASE_POSITION;return TOK_ETEQ;
 	 %}
<MAINSCANNERSTATE>[i][s] 	 %{
FLEX_NEW_TERMINAL(TOK_IS);FLEX_INCREASE_POSITION;return TOK_IS;
 	 %}
<MAINSCANNERSTATE>[n][o][t] 	 %{
FLEX_NEW_TERMINAL(TOK_NOT);FLEX_INCREASE_POSITION;return TOK_NOT;
 	 %}
<MAINSCANNERSTATE>[o][r] 	 %{
FLEX_NEW_TERMINAL(TOK_WRITTEN_OR);FLEX_INCREASE_POSITION;return TOK_WRITTEN_OR;
 	 %}
<MAINSCANNERSTATE>[a][n][d] 	 %{
FLEX_NEW_TERMINAL(TOK_AND);FLEX_INCREASE_POSITION;return TOK_AND;
 	 %}
<MAINSCANNERSTATE>[l][a][m][b][d][a] 	 %{
FLEX_NEW_TERMINAL(TOK_LAMBDA);FLEX_INCREASE_POSITION;return TOK_LAMBDA;
 	 %}
<MAINSCANNERSTATE>[a][s][s][e][r][t] 	 %{
FLEX_NEW_TERMINAL(TOK_ASSERT);FLEX_INCREASE_POSITION;return TOK_ASSERT;
 	 %}
<MAINSCANNERSTATE>[+][=] 	 %{
FLEX_NEW_TERMINAL(TOK_PLEQ);FLEX_INCREASE_POSITION;return TOK_PLEQ;
 	 %}
<MAINSCANNERSTATE>[-][=] 	 %{
FLEX_NEW_TERMINAL(TOK_MNEQ);FLEX_INCREASE_POSITION;return TOK_MNEQ;
 	 %}
<MAINSCANNERSTATE>[*][=] 	 %{
FLEX_NEW_TERMINAL(TOK_STEQ);FLEX_INCREASE_POSITION;return TOK_STEQ;
 	 %}
<MAINSCANNERSTATE>[/][=] 	 %{
FLEX_NEW_TERMINAL(TOK_DIEQ);FLEX_INCREASE_POSITION;return TOK_DIEQ;
 	 %}
<MAINSCANNERSTATE>[%][=] 	 %{
FLEX_NEW_TERMINAL(TOK_PCEQ);FLEX_INCREASE_POSITION;return TOK_PCEQ;
 	 %}
<MAINSCANNERSTATE>[*][*][=] 	 %{
FLEX_NEW_TERMINAL(TOK_STSTEQ);FLEX_INCREASE_POSITION;return TOK_STSTEQ;
 	 %}
<MAINSCANNERSTATE>[>][>][=] 	 %{
FLEX_NEW_TERMINAL(TOK_GTGTEQ);FLEX_INCREASE_POSITION;return TOK_GTGTEQ;
 	 %}
<MAINSCANNERSTATE>[<][<][=] 	 %{
FLEX_NEW_TERMINAL(TOK_LTLTEQ);FLEX_INCREASE_POSITION;return TOK_LTLTEQ;
 	 %}
<MAINSCANNERSTATE>[&][=] 	 %{
FLEX_NEW_TERMINAL(TOK_ASEQ);FLEX_INCREASE_POSITION;return TOK_ASEQ;
 	 %}
<MAINSCANNERSTATE>[\x5e][=] 	 %{
FLEX_NEW_TERMINAL(TOK_EXEQ);FLEX_INCREASE_POSITION;return TOK_EXEQ;
 	 %}
<MAINSCANNERSTATE>[|][=] 	 %{
FLEX_NEW_TERMINAL(TOK_OREQ);FLEX_INCREASE_POSITION;return TOK_OREQ;
 	 %}
<MAINSCANNERSTATE>[p][a][s][s] 	 %{
FLEX_NEW_TERMINAL(TOK_PASS);FLEX_INCREASE_POSITION;return TOK_PASS;
 	 %}
<MAINSCANNERSTATE>[d][e][l] 	 %{
FLEX_NEW_TERMINAL(TOK_DEL);FLEX_INCREASE_POSITION;return TOK_DEL;
 	 %}
<MAINSCANNERSTATE>[p][r][i][n][t] 	 %{
FLEX_NEW_TERMINAL(TOK_PRINT);FLEX_INCREASE_POSITION;return TOK_PRINT;
 	 %}
<MAINSCANNERSTATE>[r][e][t][u][r][n] 	 %{
FLEX_NEW_TERMINAL(TOK_RETURN);FLEX_INCREASE_POSITION;return TOK_RETURN;
 	 %}
<MAINSCANNERSTATE>[y][i][e][l][d] 	 %{
FLEX_NEW_TERMINAL(TOK_YIELD);FLEX_INCREASE_POSITION;return TOK_YIELD;
 	 %}
<MAINSCANNERSTATE>[r][a][i][s][e] 	 %{
FLEX_NEW_TERMINAL(TOK_RAISE);FLEX_INCREASE_POSITION;return TOK_RAISE;
 	 %}
<MAINSCANNERSTATE>[b][r][e][a][k] 	 %{
FLEX_NEW_TERMINAL(TOK_BREAK);FLEX_INCREASE_POSITION;return TOK_BREAK;
 	 %}
<MAINSCANNERSTATE>[c][o][n][t][i][n][u][e] 	 %{
FLEX_NEW_TERMINAL(TOK_CONTINUE);FLEX_INCREASE_POSITION;return TOK_CONTINUE;
 	 %}
<MAINSCANNERSTATE>[i][m][p][o][r][t] 	 %{
FLEX_NEW_TERMINAL(TOK_IMPORT);FLEX_INCREASE_POSITION;return TOK_IMPORT;
 	 %}
<MAINSCANNERSTATE>[a][s] 	 %{
FLEX_NEW_TERMINAL(TOK_WRITTEN_AS);FLEX_INCREASE_POSITION;return TOK_WRITTEN_AS;
 	 %}
<MAINSCANNERSTATE>[f][r][o][m] 	 %{
FLEX_NEW_TERMINAL(TOK_FROM);FLEX_INCREASE_POSITION;return TOK_FROM;
 	 %}
<MAINSCANNERSTATE>[g][l][o][b][a][l] 	 %{
FLEX_NEW_TERMINAL(TOK_GLOBAL);FLEX_INCREASE_POSITION;return TOK_GLOBAL;
 	 %}
<MAINSCANNERSTATE>[e][x][e][c] 	 %{
FLEX_NEW_TERMINAL(TOK_EXEC);FLEX_INCREASE_POSITION;return TOK_EXEC;
 	 %}
<MAINSCANNERSTATE>[;] 	 %{
FLEX_NEW_TERMINAL(TOK_SC);FLEX_INCREASE_POSITION;return TOK_SC;
 	 %}
<MAINSCANNERSTATE>[e][l][i][f] 	 %{
FLEX_NEW_TERMINAL(TOK_ELIF);FLEX_INCREASE_POSITION;return TOK_ELIF;
 	 %}
<MAINSCANNERSTATE>[e][l][s][e] 	 %{
FLEX_NEW_TERMINAL(TOK_ELSE);FLEX_INCREASE_POSITION;return TOK_ELSE;
 	 %}
<MAINSCANNERSTATE>[w][h][i][l][e] 	 %{
FLEX_NEW_TERMINAL(TOK_WHILE);FLEX_INCREASE_POSITION;return TOK_WHILE;
 	 %}
<MAINSCANNERSTATE>[t][r][y] 	 %{
FLEX_NEW_TERMINAL(TOK_TRY);FLEX_INCREASE_POSITION;return TOK_TRY;
 	 %}
<MAINSCANNERSTATE>[e][x][c][e][p][t] 	 %{
FLEX_NEW_TERMINAL(TOK_EXCEPT);FLEX_INCREASE_POSITION;return TOK_EXCEPT;
 	 %}
<MAINSCANNERSTATE>[f][i][n][a][l][l][y] 	 %{
FLEX_NEW_TERMINAL(TOK_FINALLY);FLEX_INCREASE_POSITION;return TOK_FINALLY;
 	 %}
<MAINSCANNERSTATE>[w][i][t][h] 	 %{
FLEX_NEW_TERMINAL(TOK_WITH);FLEX_INCREASE_POSITION;return TOK_WITH;
 	 %}
<MAINSCANNERSTATE>[d][e][f] 	 %{
FLEX_NEW_TERMINAL(TOK_DEF);FLEX_INCREASE_POSITION;return TOK_DEF;
 	 %}
<MAINSCANNERSTATE>[@] 	 %{
FLEX_NEW_TERMINAL(TOK_STRUDL);FLEX_INCREASE_POSITION;return TOK_STRUDL;
 	 %}
<MAINSCANNERSTATE>[c][l][a][s][s] 	 %{
FLEX_NEW_TERMINAL(TOK_CLASS);FLEX_INCREASE_POSITION;return TOK_CLASS;
 	 %}
<MAINSCANNERSTATE>[a-zA-Z_][a-zA-Z_0-9]* 	 %{
FLEX_NEW_TERMINAL(TOK_IDENTIFIER);FLEX_INCREASE_POSITION;return TOK_IDENTIFIER;
 	 %}
<MAINSCANNERSTATE>[^%]|[%] 	 %{
FLEX_NEW_TERMINAL(TOK_ANYCHAR);FLEX_INCREASE_POSITION;return TOK_ANYCHAR;
 	 %}
<MAINSCANNERSTATE>[^%]|[%]  	 %{
FLEX_NEW_TERMINAL(TOK_INDENT);FLEX_INCREASE_POSITION;return TOK_INDENT;
 	 %}
<MAINSCANNERSTATE>[^%]|[%]   	 %{
FLEX_NEW_TERMINAL(TOK_DEDENT);FLEX_INCREASE_POSITION;return TOK_DEDENT;
 	 %}
<MAINSCANNERSTATE>[^%]|[%]    	 %{
FLEX_NEW_TERMINAL(TOK_SPACE_INDENT);FLEX_INCREASE_POSITION;return TOK_SPACE_INDENT;
 	 %}
<MAINSCANNERSTATE>[^%]|[%]     	 %{
FLEX_NEW_TERMINAL(TOK_SPACE_EMPTY_LINE);FLEX_INCREASE_POSITION;return TOK_SPACE_EMPTY_LINE;
 	 %}
<MAINSCANNERSTATE>[^%]|[%]      	 %{
FLEX_NEW_TERMINAL(TOK_SPACE_NO_INDENT);FLEX_INCREASE_POSITION;return TOK_SPACE_NO_INDENT;
 	 %}
<MAINSCANNERSTATE>[^%]|[%]       	 %{
FLEX_NEW_TERMINAL(TOK_NEW_LINE_IGNORED);FLEX_INCREASE_POSITION;return TOK_NEW_LINE_IGNORED;
 	 %}
<MAINSCANNERSTATE>[^%]|[%]        	 %{
FLEX_NEW_TERMINAL(TOK_SPACE_AT_END_OF_LINE);FLEX_INCREASE_POSITION;return TOK_SPACE_AT_END_OF_LINE;
 	 %}
<MAINSCANNERSTATE>[^%]|[%]         	 %{
FLEX_NEW_TERMINAL(TOK_SPACE_OTHER);FLEX_INCREASE_POSITION;return TOK_SPACE_OTHER;
 	 %}

%%

